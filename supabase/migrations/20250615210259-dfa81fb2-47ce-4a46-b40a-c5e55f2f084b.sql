
-- Create an enum type for order status
CREATE TYPE public.order_status AS ENUM (
    'novo_pedido',
    'a_separar',
    'separado',
    'a_enviar',
    'enviado',
    'recuperar_carrinho'
);

-- Create a table for user profiles
CREATE TABLE public.profiles (
  id UUID NOT NULL PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
  full_name TEXT,
  avatar_url TEXT
);

-- Add Row Level Security (RLS) to the profiles table
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Create policy that allows users to view their own profile
CREATE POLICY "Users can view their own profile."
  ON public.profiles FOR SELECT
  USING (auth.uid() = id);

-- Create policy that allows users to update their own profile
CREATE POLICY "Users can update their own profile."
  ON public.profiles FOR UPDATE
  USING (auth.uid() = id);

-- Function to create a profile for a new user
CREATE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id)
  VALUES (new.id);
  RETURN new;
END;
$$;

-- Trigger to execute the function when a new user is created
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Create a table for orders
CREATE TABLE public.orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    user_id UUID DEFAULT auth.uid() NOT NULL REFERENCES auth.users ON DELETE CASCADE,
    customer_name TEXT,
    product_name TEXT,
    status public.order_status DEFAULT 'novo_pedido'::public.order_status NOT NULL
);

-- Add Row Level Security (RLS) to the orders table
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;

-- Create policy that allows users to manage their own orders
CREATE POLICY "Users can manage their own orders."
  ON public.orders FOR ALL
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);
